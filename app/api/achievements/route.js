import { NextRequest, NextResponse } from 'next/server';
import { verifyJwt } from '../../utils/jwt.js'; // –£–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .js
// import { createClient } from '@supabase/supabase-js'; // –ü–æ–∫–∞ –Ω–µ –Ω—É–∂–Ω–æ –¥–ª—è –∑–∞–≥–ª—É—à–∫–∏

// const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
// const supabaseServiceKey = process.env.SUPABASE_SERVICE_KEY;
// const supabaseAdmin = createClient(supabaseUrl, supabaseServiceKey, { auth: { persistSession: false } });

// –ó–∞–≥–ª—É—à–∫–∞ –¥–∞–Ω–Ω—ã—Ö:
const allAchievements = [
   { id: 'first_stream', name: '–ü–µ—Ä–≤—ã–π —Å—Ç—Ä–∏–º', description: '–ü—Ä–æ–≤–µ—Å—Ç–∏ –ø–µ—Ä–≤—É—é —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é.', icon: 'üöÄ', condition: '–ü—Ä–æ–≤–µ—Å—Ç–∏ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é', type: 'streamer' },
   { id: 'follower_goal_10', name: '10 –§–æ–ª–ª–æ–≤–µ—Ä–æ–≤', description: '–°–æ–±—Ä–∞—Ç—å 10 —Ñ–æ–ª–ª–æ–≤–µ—Ä–æ–≤ –Ω–∞ Twitch.', icon: 'üë•', condition: '10+ —Ñ–æ–ª–ª–æ–≤–µ—Ä–æ–≤', type: 'streamer' },
   { id: 'watch_time_1h', name: '–ß–∞—Å –≤ —ç—Ñ–∏—Ä–µ', description: '–ù–∞–±—Ä–∞—Ç—å 1 —á–∞—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–∏—Ö —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–π.', icon: '‚è±Ô∏è', condition: '1 —á–∞—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞', type: 'streamer' },
   { id: 'first_review', name: '–ü–µ—Ä–≤—ã–π –æ—Ç–∑—ã–≤', description: '–ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –æ—Ç–∑—ã–≤.', icon: '‚úçÔ∏è', condition: '–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤', type: 'user' },
   { id: 'affiliate_status', name: '–ö–æ–º–ø–∞–Ω—å–æ–Ω Twitch', description: '–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–º–ø–∞–Ω—å–æ–Ω–∞ –Ω–∞ Twitch.', icon: 'ü§ù', condition: '–°—Ç–∞—Ç—É—Å –∫–æ–º–ø–∞–Ω—å–æ–Ω–∞', type: 'streamer' },
   { id: 'watch_10_hours', name: '–°–º–æ—Ç—Ä—è—â–∏–π', description: '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å 10 —á–∞—Å–æ–≤ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–π.', icon: 'üëÄ', condition: '–°–º–æ—Ç—Ä–µ—Ç—å 10—á', type: 'user' },
];

// –ó–∞–≥–ª—É—à–∫–∞: –∫–∞–∫–∏–µ –∞—á–∏–≤–∫–∏ —É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã"
// –í —Ä–µ–∞–ª—å–Ω–æ–º API —ç—Ç–æ –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ user_achievements
const getUserUnlockedAchievements = async (userId) => {
    // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
    console.log(`[API /achievements] –ó–∞–≥–ª—É—à–∫–∞: –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞—á–∏–≤–æ–∫ –¥–ª—è user: ${userId}`)
    if (userId === 'user-id-example-1') { // –ü—Ä–∏–º–µ—Ä
         return ['first_stream', 'first_review'];
    } else {
        return ['first_stream']; // –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö
    }
};

export async function GET(request) {
    const token = request.headers.get('Authorization')?.split(' ')[1];
    const verifiedToken = await verifyJwt(token);

    if (!verifiedToken) {
        return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
    const userId = verifiedToken.sub;

    try {
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞—á–∏–≤–æ–∫ (–∏–∑ –∑–∞–≥–ª—É—à–∫–∏)
        const unlockedIds = await getUserUnlockedAchievements(userId);

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞—á–∏–≤–æ–∫ –∏ ID —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
        const responseData = {
            allAchievements: allAchievements,
            unlockedAchievementIds: unlockedIds
        };

        console.log(`[API /achievements] –ó–∞–≥–ª—É—à–∫–∞: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è user: ${userId}`);
        return NextResponse.json(responseData, { status: 200 });

    } catch (error) {
        console.error("[API /achievements] –ó–∞–≥–ª—É—à–∫–∞: –û—à–∏–±–∫–∞:", error);
        return NextResponse.json({ error: `Internal Server Error: ${error.message}` }, { status: 500 });
    }
} 