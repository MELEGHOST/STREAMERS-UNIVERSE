'use client';

import React, { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import styles from './reviews.module.css';
import ReviewCategories from '../components/ReviewCategories';
import Link from 'next/link';
import { DataStorage } from '../utils/dataStorage';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ReviewCategories
import { categories } from '../components/ReviewCategories';

export default function Reviews() {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [showModal, setShowModal] = useState(false);
  const [selectedCategory, setSelectedCategory] = useState(null);
  const [selectedSubcategory, setSelectedSubcategory] = useState(null);
  const [rating, setRating] = useState(0);
  const [hoverRating, setHoverRating] = useState(0);
  const [productName, setProductName] = useState('');
  const [reviewText, setReviewText] = useState('');
  const [submitting, setSubmitting] = useState(false);
  const [submitError, setSubmitError] = useState('');
  const router = useRouter();

  useEffect(() => {
    const checkAuth = async () => {
      try {
        setIsLoading(true);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        const isAuth = DataStorage.isAuthenticated();
        setIsAuthenticated(isAuth);
        
        if (!isAuth) {
          // –ï—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
          router.push('/login');
        } else {
          setIsLoading(false);
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
        setIsLoading(false);
      }
    };
    
    checkAuth();
  }, [router]);

  const handleReturnToMenu = () => {
    router.push('/menu');
  };

  const openWriteReviewModal = (categoryData = null) => {
    setShowModal(true);
    
    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
    if (categoryData && categoryData.category) {
      setSelectedCategory(categoryData.category);
      
      if (categoryData.subcategory) {
        setSelectedSubcategory(categoryData.subcategory);
      }
    }
  };

  const closeModal = () => {
    setShowModal(false);
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
    setSelectedCategory(null);
    setSelectedSubcategory(null);
    setRating(0);
    setHoverRating(0);
    setProductName('');
    setReviewText('');
    setSubmitError('');
  };

  const handleRatingClick = (starIndex) => {
    setRating(starIndex);
  };

  const handleMouseEnter = (starIndex) => {
    setHoverRating(starIndex);
  };

  const handleMouseLeave = () => {
    setHoverRating(0);
  };

  const validateForm = () => {
    if (!selectedCategory) {
      setSubmitError('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é');
      return false;
    }
    
    if (!selectedSubcategory) {
      setSubmitError('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é');
      return false;
    }
    
    if (!productName.trim()) {
      setSubmitError('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥–∏');
      return false;
    }
    
    if (rating === 0) {
      setSubmitError('–ü–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É (–æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥)');
      return false;
    }
    
    if (!reviewText.trim() || reviewText.length < 10) {
      setSubmitError('–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)');
      return false;
    }
    
    return true;
  };

  const submitReview = async () => {
    if (!validateForm()) {
      return;
    }
    
    setSubmitting(true);
    setSubmitError('');
    
    try {
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö
      console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∑—ã–≤–∞:', {
        category: selectedCategory.id,
        subcategory: selectedSubcategory.id,
        productName,
        rating,
        reviewText
      });
      
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É API
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // –£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ
      alert('–í–∞—à –æ—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!');
      closeModal();
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–∞:', error);
      setSubmitError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
      setSubmitting(false);
    }
  };

  if (isLoading) {
    return (
      <div className={styles.loadingContainer}>
        <div className={styles.loader}></div>
        <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
      </div>
    );
  }

  return (
    <div className={styles.container}>
      <div className={styles.header}>
        <button onClick={handleReturnToMenu} className={styles.returnButton}>
          <span className={styles.returnIcon}>‚Üê</span>
          –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é
        </button>
        <h1 className={styles.title}>–û—Ç–∑—ã–≤—ã –æ–±–æ –≤—Å—ë–º</h1>
      </div>
      
      <p className={styles.description}>
        –ó–¥–µ—Å—å —Å–æ–±—Ä–∞–Ω—ã –æ—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±–æ –≤—Å—ë–º, —á—Ç–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —ç—Ç–æ–º –º–∏—Ä–µ: 
        –æ—Ç —Ç–µ—Ö–Ω–∏–∫–∏ –¥–ª—è —Å—Ç—Ä–∏–º–µ—Ä–æ–≤ –¥–æ –æ–Ω–ª–∞–π–Ω-—Å–µ—Ä–≤–∏—Å–æ–≤, –∏–≥—Ä, –º–µ–±–µ–ª–∏ –∏ –º–Ω–æ–≥–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ.
        –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π.
      </p>
      
      <button onClick={openWriteReviewModal} className={styles.writeReviewButton}>
        <span className={styles.buttonIcon}>‚úèÔ∏è</span>
        –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤
      </button>
      
      <ReviewCategories onWriteReview={openWriteReviewModal} />
      
      <div className={styles.infoSection}>
        <h2 className={styles.infoTitle}>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?</h2>
        <div className={styles.infoBlocks}>
          <div className={styles.infoBlock}>
            <div className={styles.infoIcon}>üìù</div>
            <h3>–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –æ—Ç–∑—ã–≤—ã</h3>
            <p>–í—Å–µ –æ—Ç–∑—ã–≤—ã –æ—Å—Ç–∞–≤–ª–µ–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –æ—Ö–≤–∞—Ç—ã–≤–∞—é—Ç –ª—é–±—ã–µ —Ç–æ–≤–∞—Ä—ã, —Å–µ—Ä–≤–∏—Å—ã –∏ –ø—Ä–æ–¥—É–∫—Ç—ã.</p>
          </div>
          <div className={styles.infoBlock}>
            <div className={styles.infoIcon}>üîé</div>
            <h3>–ß–µ—Å—Ç–Ω—ã–µ –º–Ω–µ–Ω–∏—è</h3>
            <p>–ú—ã –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ, —Ç–∞–∫ –∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã.</p>
          </div>
          <div className={styles.infoBlock}>
            <div className={styles.infoIcon}>üåç</div>
            <h3>–í—Å—ë —á—Ç–æ —É–≥–æ–¥–Ω–æ</h3>
            <p>–û—Ç —Ç–µ—Ö–Ω–∏–∫–∏ –∏ –∏–≥—Ä –¥–æ –º–µ–±–µ–ª–∏ –∏ —Å–µ—Ä–≤–∏—Å–æ–≤ - –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∏–ª–∏ –Ω–∞–π—Ç–∏ –æ—Ç–∑—ã–≤ –æ —á—ë–º —É–≥–æ–¥–Ω–æ!</p>
          </div>
        </div>
      </div>
      
      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞ */}
      {showModal && (
        <div className={styles.modalOverlay}>
          <div className={styles.writeReviewModal}>
            <div className={styles.modalHeader}>
              <h2>–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤</h2>
              <button onClick={closeModal} className={styles.closeButton}>√ó</button>
            </div>
            <div className={styles.modalContent}>
              {submitError && (
                <div className={styles.errorMessage}>
                  {submitError}
                </div>
              )}
              
              <div className={styles.formGroup}>
                <label>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</label>
                <select 
                  className={styles.selectField}
                  value={selectedCategory ? selectedCategory.id : ""}
                  onChange={(e) => {
                    const cat = categories.find(c => c.id === e.target.value);
                    setSelectedCategory(cat);
                    setSelectedSubcategory(null);
                  }}
                >
                  <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</option>
                  {categories.map(cat => (
                    <option key={cat.id} value={cat.id}>{cat.name}</option>
                  ))}
                </select>
              </div>
              
              {selectedCategory && (
                <div className={styles.formGroup}>
                  <label>–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è</label>
                  <select 
                    className={styles.selectField}
                    value={selectedSubcategory ? selectedSubcategory.id : ""}
                    onChange={(e) => {
                      const subcat = selectedCategory.subcategories.find(sc => sc.id === e.target.value);
                      setSelectedSubcategory(subcat);
                    }}
                  >
                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é</option>
                    {selectedCategory.subcategories.map(subcat => (
                      <option key={subcat.id} value={subcat.id}>{subcat.name}</option>
                    ))}
                  </select>
                </div>
              )}
              
              <div className={styles.formGroup}>
                <label>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É—Å–ª—É–≥–∏</label>
                <input 
                  type="text" 
                  className={styles.inputField} 
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: Logitech G Pro X" 
                  value={productName}
                  onChange={(e) => setProductName(e.target.value)}
                />
              </div>
              <div className={styles.formGroup}>
                <label>–û—Ü–µ–Ω–∫–∞</label>
                <div className={styles.ratingSelector}>
                  {[1, 2, 3, 4, 5].map(star => (
                    <span 
                      key={star} 
                      className={`${styles.ratingStar} ${(hoverRating || rating) >= star ? styles.active : ''}`}
                      onClick={() => handleRatingClick(star)}
                      onMouseEnter={() => handleMouseEnter(star)}
                      onMouseLeave={handleMouseLeave}
                    >
                      ‚òÖ
                    </span>
                  ))}
                </div>
              </div>
              <div className={styles.formGroup}>
                <label>–û—Ç–∑—ã–≤</label>
                <textarea 
                  className={styles.textareaField} 
                  placeholder="–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –æ–ø—ã—Ç–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è..."
                  rows="5"
                  value={reviewText}
                  onChange={(e) => setReviewText(e.target.value)}
                ></textarea>
              </div>
              <div className={styles.formActions}>
                <button 
                  className={styles.cancelButton} 
                  onClick={closeModal}
                  disabled={submitting}
                >
                  –û—Ç–º–µ–Ω–∞
                </button>
                <button 
                  className={styles.submitButton}
                  onClick={submitReview}
                  disabled={submitting}
                >
                  {submitting ? '–ü—É–±–ª–∏–∫–∞—Ü–∏—è...' : '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å'}
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
} 