'use client';

import { useState, useEffect, useCallback } from 'react';
import { useRouter } from 'next/navigation';
import Image from 'next/image';
import styles from '../../styles/menu.module.css';
import { useAuth } from '../contexts/AuthContext';

export default function Menu() {
  const router = useRouter();
  const { user, supabase, isLoading, isAuthenticated } = useAuth();
  
  const [error, setError] = useState(null);
  const [isLoggingOut, setIsLoggingOut] = useState(false);

  useEffect(() => {
    if (!isLoading && !isAuthenticated) {
      console.log('[MenuPage] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ /auth');
      router.push('/auth?message=Session expired or not found');
    }
  }, [isLoading, isAuthenticated, router]);

  const handleLogout = useCallback(async () => {
    if (isLoggingOut || !supabase) return;
    setIsLoggingOut(true);
    console.log('–ú–µ–Ω—é: –í—ã–ø–æ–ª–Ω—è–µ–º –≤—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ —á–µ—Ä–µ–∑ Supabase...');
    setError(null); 
    try {
      const { error: signOutError } = await supabase.auth.signOut();
      if (signOutError) {
        console.error('–ú–µ–Ω—é: –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ Supabase:', signOutError);
        setError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ: ${signOutError.message}`);
        setIsLoggingOut(false);
      } else {
        console.log('–ú–µ–Ω—é: –í—ã—Ö–æ–¥ –∏–∑ Supabase —É—Å–ø–µ—à–µ–Ω. AuthContext –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç.');
      }
    } catch (criticalError) {
      console.error('–ú–µ–Ω—é: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞:', criticalError);
      setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.');
      setIsLoggingOut(false);
    }
  }, [isLoggingOut, supabase, setError, router]);

  const userDisplayName = user?.user_metadata?.full_name || user?.email || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
  const userAvatarUrl = user?.user_metadata?.avatar_url || '/images/default_avatar.png';

  if (isLoading) {
    return (
      <div className={styles.loadingContainer}> 
        <div className={styles.spinner}></div>
        <p>–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–Ω—é...</p>
      </div>
    );
  }

  if (!isAuthenticated) {
     return (
      <div className={styles.loadingContainer}>
        <p>–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞...</p>
      </div>
    );
  }

  return (
    <div className={styles.container}>
      <div className={styles.menuHeader}>
        <div className={styles.userInfo} onClick={() => router.push('/profile')} title="–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å">
          <div className={styles.userAvatar}>
            <Image 
              src={userAvatarUrl}
              alt="–ê–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" 
              width={60} 
              height={60} 
              onError={(e) => { e.target.src = '/images/default_avatar.png'; }} 
              priority 
            />
          </div>
          <div className={styles.userDetails}>
            <h1>{userDisplayName}</h1>
          </div>
        </div>
      </div>

      {error && <div className={styles.error}>{error}</div>} 

      <nav className={styles.navigation}>
        <ul>
          <li className={styles.menuItem} onClick={() => router.push('/profile')}>
             <span className={styles.menuIcon}>üë§</span>
             <div className={styles.menuContent}>
                <h2>–ü—Ä–æ—Ñ–∏–ª—å</h2>
                <p>–ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è</p>
             </div>
          </li>
           <li className={styles.menuItem} onClick={() => router.push('/search')}>
             <span className={styles.menuIcon}>üîç</span>
             <div className={styles.menuContent}>
                <h2>–ü–æ–∏—Å–∫</h2>
                <p>–ù–∞–π—Ç–∏ —Å—Ç—Ä–∏–º–µ—Ä–æ–≤ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç</p>
             </div>
          </li>
        </ul>
      </nav>

      <button 
        onClick={handleLogout}
        className={`${styles.logoutButton}`}
        disabled={isLoggingOut}
      >
        {isLoggingOut ? '–í—ã—Ö–æ–¥...' : '–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞'}
      </button>
    </div>
  );
} 