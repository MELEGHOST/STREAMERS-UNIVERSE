'use client';

import { useState, useEffect, useCallback } from 'react';
import { useRouter } from 'next/navigation';
import CyberAvatar from '../components/CyberAvatar'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–≥–ª—É—à–∫—É
import styles from './profile.module.css';
import { useAuth } from '../contexts/AuthContext';

function ProfilePage() {
  const router = useRouter();
  const { user, isLoading, isAuthenticated } = useAuth();
  
  const [twitchUserData, setTwitchUserData] = useState(null);
  const [loadingProfile, setLoadingProfile] = useState(true);
  const [error, setError] = useState(null);
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Supabase –ò Twitch ID –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
  const supabaseUserId = user?.id; 
  const twitchUserId = user?.user_metadata?.provider_id;

  // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ /auth, –µ—Å–ª–∏ –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
  useEffect(() => {
    if (!isLoading && !isAuthenticated) {
      console.log('[ProfilePage] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ /auth');
      router.push('/auth?message=Session+expired+or+not+found&next=/profile');
    }
  }, [isLoading, isAuthenticated, router]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å Twitch API
  const fetchTwitchUserData = useCallback(async (idToFetch) => {
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ ID - —ç—Ç–æ —á–∏—Å–ª–æ–≤–æ–π Twitch ID
    if (!idToFetch || typeof idToFetch !== 'string' || !/^[0-9]+$/.test(idToFetch)) {
        console.warn(`[ProfilePage] –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π Twitch ID –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: ${idToFetch}`);
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å Twitch ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö.');
        setLoadingProfile(false);
        return;
    }
    console.log(`[ProfilePage] –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö Twitch –¥–ª—è twitchUserId: ${idToFetch}...`);
    setError(null);
    setLoadingProfile(true);

    let cachedDisplayData = null;
    const cachedKey = `twitch_user_${idToFetch}`; // –ö–ª—é—á –∫—ç—à–∞ —Ç–µ–ø–µ—Ä—å –ø–æ Twitch ID
    if (typeof window !== 'undefined') {
      const cachedStr = localStorage.getItem(cachedKey);
      if (cachedStr) {
        try {
          cachedDisplayData = JSON.parse(cachedStr);
          setTwitchUserData(cachedDisplayData); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—ç—à —Å—Ä–∞–∑—É
          console.log('[ProfilePage] –û—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –ø—Ä–µ–¥–≤. –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage.');
        } catch (error) {
           console.warn('[ProfilePage] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ localStorage, —É–¥–∞–ª—è–µ–º –±–∏—Ç—ã–π –∫–ª—é—á:', error.message);
           localStorage.removeItem(cachedKey); // –£–¥–∞–ª—è–µ–º –±–∏—Ç—ã–π –∫—ç—à
        }
      }
    }

    try {
      // –ü–µ—Ä–µ–¥–∞–µ–º Twitch ID –≤ API
      const apiUrl = `/api/twitch/user?userId=${idToFetch}`; 
      const response = await fetch(apiUrl);

      if (!response.ok) {
        const errorText = await response.text();
        const errorMsg = `[ProfilePage] –û—à–∏–±–∫–∞ API /api/twitch/user (${response.status}): ${errorText}`;
        console.error(errorMsg);
        setError(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (${response.status}). –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –µ—Å—Ç—å.`);
        // –û—Å—Ç–∞–≤–ª—è–µ–º twitchUserData (–∫—ç—à)
      } else {
        const data = await response.json();
        console.log('[ProfilePage] –ü–æ–ª—É—á–µ–Ω—ã —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç API:', data);
        setTwitchUserData(data); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ localStorage
        if (typeof window !== 'undefined' && data) {
            try {
               localStorage.setItem(cachedKey, JSON.stringify(data));
               console.log('[ProfilePage] –°–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage.');
            } catch (storageError) {
               console.error('[ProfilePage] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage:', storageError);
            }
        }
      }
    } catch (fetchError) {
      console.error('[ProfilePage] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ fetch Twitch data:', fetchError);
      setError(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${fetchError.message}. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –µ—Å—Ç—å.`);
      // –û—Å—Ç–∞–≤–ª—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    } finally {
      setLoadingProfile(false); 
    }
  }, []);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –∫–æ–≥–¥–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è Twitch ID
  useEffect(() => {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å twitchUserId
    if (twitchUserId) {
      console.log(`[ProfilePage] Twitch ID (${twitchUserId}) –¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º fetchTwitchUserData.`);
      fetchTwitchUserData(twitchUserId);
    } else if (!isLoading && isAuthenticated) {
        // –ï—Å–ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –Ω–æ –Ω–µ—Ç Twitch ID - —ç—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ
        console.error("[ProfilePage] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –Ω–æ Twitch ID (provider_id) –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ user_metadata!");
        setError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Twitch ID –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.");
        setLoadingProfile(false); 
    } else if (!isLoading && !isAuthenticated) {
         // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω (—É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –¥—Ä—É–≥–∏–º useEffect)
         setLoadingProfile(false);
    }
  // –ó–∞–≤–∏—Å–∏–º –æ—Ç twitchUserId –∏ isLoading (—á—Ç–æ–±—ã –¥–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≥—Ä—É–∑–∫–∏ user)
  }, [twitchUserId, isLoading, isAuthenticated, fetchTwitchUserData]);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º twitchUserData?.display_name –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫, 
  // user_metadata?.full_name –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π
  const displayName = twitchUserData?.display_name || user?.user_metadata?.full_name || '–ó–∞–≥—Ä—É–∑–∫–∞...';
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º twitchUserData?.profile_image_url –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫,
  // user_metadata?.avatar_url –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π
  const avatarUrl = twitchUserData?.profile_image_url || user?.user_metadata?.avatar_url || '/images/default_avatar.png';
  const description = twitchUserData?.description || '';
  const viewCount = twitchUserData?.view_count;
  const createdAt = twitchUserData?.created_at;

  // –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
  const formatDate = (dateString) => {
    if (!dateString) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    try {
      return new Date(dateString).toLocaleDateString('ru-RU', { year: 'numeric', month: 'long', day: 'numeric' });
    } catch { return '–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞'; }
  };

  // --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ --- 
  if (isLoading) {
    return (
      <div className={styles.loadingContainer}>
        <div className="spinner"></div>
        <p>–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è...</p>
      </div>
    );
  }
  if (!isAuthenticated) {
     return (
      <div className={styles.loadingContainer}>
        <p>–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞...</p>
      </div>
    );
  }

  return (
    <div className={styles.container}>
      <button onClick={() => router.push('/menu')} className={styles.backButton}>
        &larr; –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é
      </button>

      {error && <div className={styles.errorMessage}>{error}</div>} 

      <div className={styles.profileHeader}>
        {/* –°–∫–µ–ª–µ—Ç –¥–ª—è —à–∞–ø–∫–∏ */} 
        {(loadingProfile && !twitchUserData) ? (
          <div className={styles.skeletonHeader}>
            <div className={`${styles.skeletonAvatar} ${styles.skeleton}`}></div>
            <div style={{ flexGrow: 1 }}>
                <div className={`${styles.skeletonTextLarge} ${styles.skeleton}`}></div>
                <div className={`${styles.skeletonText} ${styles.skeleton}`}></div>
            </div>
          </div>
        ) : (
          <>
            <CyberAvatar 
              src={avatarUrl}
              alt={`–ê–≤–∞—Ç–∞—Ä ${displayName}`}
              size="lg" // –£–≤–µ–ª–∏—á–∏–º —Ä–∞–∑–º–µ—Ä –∞–≤–∞—Ç–∞—Ä–∞
              className={styles.profileAvatar} 
              priority={true}
              onError={(e) => { e.target.src = '/images/default_avatar.png'; }} 
            />
            <div className={styles.profileDetails}>
              <h1>{displayName}</h1>
              {description && <p className={styles.description}>{description}</p>}
              <div className={styles.profileStats}>
                {viewCount !== undefined && <span className={styles.statItem}>üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {viewCount.toLocaleString('ru-RU')}</span>}
                {createdAt && <span className={styles.statItem}>üìÖ –ù–∞ Twitch —Å: {formatDate(createdAt)}</span>}
              </div>
            </div>
          </>
        )}
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–æ—Ñ–∏–ª—è */} 
      <div className={styles.profileContent}>
        <h2>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
        {/* –°–∫–µ–ª–µ—Ç –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ */} 
        {loadingProfile ? (
          <div className={styles.skeletonSection}>
             <div className={`${styles.skeletonText} ${styles.skeleton}`}></div>
             <div className={`${styles.skeletonText} ${styles.skeleton}`}></div>
             <div className={`${styles.skeletonText} ${styles.skeleton.short}`}></div>
          </div>
        ) : twitchUserData ? (
          <div>
            <p><strong>ID:</strong> {twitchUserData.id}</p>
            <p><strong>–õ–æ–≥–∏–Ω:</strong> {twitchUserData.login}</p>
            <p><strong>–¢–∏–ø:</strong> {twitchUserData.broadcaster_type || '-'}</p>
            {/* –ó–¥–µ—Å—å –±—É–¥–µ—Ç –º–µ—Å—Ç–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–µ–∫—Ü–∏–π */} 
          </div>
        ) : (
          <p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è.</p>
        )}
      </div>
    </div>
  );
}

export default ProfilePage; 