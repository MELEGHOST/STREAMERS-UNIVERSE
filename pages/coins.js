'use client';

import React, { useState, useEffect } from 'react';
import Cookies from 'js-cookie';
import { useRouter } from 'next/router';
import styles from './coins.module.css';

export default function StreamerCoins() {
  const router = useRouter();
  const [userData, setUserData] = useState(null);
  const [coinsData, setCoinsData] = useState({
    balance: 0,
    transactions: [],
    lastDailyBonus: null
  });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [bonusAvailable, setBonusAvailable] = useState(false);
  const [bonusMessage, setBonusMessage] = useState('');

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const accessToken = Cookies.get('twitch_access_token');
    if (!accessToken) {
      router.push('/auth');
      return;
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const loadUserData = async () => {
      try {
        const storedUser = localStorage.getItem('twitch_user');
        if (storedUser) {
          const parsedUser = JSON.parse(storedUser);
          setUserData(parsedUser);
          
          // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–∏–Ω–∞—Ö
          loadCoinsData(parsedUser.id);
        } else {
          setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
          setLoading(false);
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö');
        setLoading(false);
      }
    };

    loadUserData();
  }, [router]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–∏–Ω–∞—Ö
  const loadCoinsData = (userId) => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–∏–Ω–∞—Ö –≤ localStorage
      const coinsDataStr = localStorage.getItem(`streamcoins_${userId}`);
      if (coinsDataStr) {
        const parsedData = JSON.parse(coinsDataStr);
        setCoinsData({
          balance: parsedData.balance || 0,
          transactions: parsedData.transactions || [],
          lastDailyBonus: parsedData.lastDailyBonus || null
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
        checkDailyBonusAvailability(parsedData.lastDailyBonus);
      } else {
        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const initialData = {
          userId: userId,
          balance: 0,
          totalEarned: 0,
          totalSpent: 0,
          transactions: [],
          lastDailyBonus: null,
          lastAdWatch: new Date(0).toISOString(),
          referralCode: generateReferralCode(userId),
          referredBy: null
        };
        
        localStorage.setItem(`streamcoins_${userId}`, JSON.stringify(initialData));
        setCoinsData({
          balance: 0,
          transactions: [],
          lastDailyBonus: null
        });
        
        // –ë–æ–Ω—É—Å –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        setBonusAvailable(true);
        setBonusMessage('–í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∞–ª—å—Ñ–∞-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏, –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã 100 —Å—Ç—Ä–∏–º–µ—Ä-–∫–æ–∏–Ω–æ–≤ –≤ –¥–µ–Ω—å!');
      }
      
      setLoading(false);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–∏–Ω–∞—Ö:', error);
      setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–∏–Ω–∞—Ö');
      setLoading(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
  const checkDailyBonusAvailability = (lastBonusDate) => {
    if (!lastBonusDate) {
      // –ï—Å–ª–∏ –±–æ–Ω—É—Å –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–ª—É—á–∞–ª–∏
      setBonusAvailable(true);
      setBonusMessage('–í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∞–ª—å—Ñ–∞-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏, –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã 100 —Å—Ç—Ä–∏–º–µ—Ä-–∫–æ–∏–Ω–æ–≤ –≤ –¥–µ–Ω—å!');
      return;
    }
    
    const now = new Date();
    const lastBonus = new Date(lastBonusDate);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—É–ø–∏–ª–∞ –ª–∏ –Ω–æ–≤–∞—è –¥–∞—Ç–∞ –ø–æ –ú–°–ö (UTC+3)
    const mskOffset = 3 * 60 * 60 * 1000; // 3 —á–∞—Å–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    
    const nowMsk = new Date(now.getTime() + mskOffset);
    const lastBonusMsk = new Date(lastBonus.getTime() + mskOffset);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–æ 00:00
    nowMsk.setUTCHours(0, 0, 0, 0);
    lastBonusMsk.setUTCHours(0, 0, 0, 0);
    
    // –ï—Å–ª–∏ –¥–∞—Ç—ã —Ä–∞–∑–Ω—ã–µ, –∑–Ω–∞—á–∏—Ç –Ω–∞—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –¥–µ–Ω—å
    if (nowMsk.getTime() > lastBonusMsk.getTime()) {
      setBonusAvailable(true);
      setBonusMessage('–í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∞–ª—å—Ñ–∞-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏, –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã 100 —Å—Ç—Ä–∏–º–µ—Ä-–∫–æ–∏–Ω–æ–≤ –≤ –¥–µ–Ω—å!');
    } else {
      setBonusAvailable(false);
      setBonusMessage('–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –±–æ–Ω—É—Å. –°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –∑–∞–≤—Ç—Ä–∞ –≤ 00:00 –ø–æ –ú–°–ö.');
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
  const generateReferralCode = (userId) => {
    const base = userId.substring(0, 5);
    const randomPart = Math.random().toString(36).substring(2, 6);
    return `${base}-${randomPart}`.toUpperCase();
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
  const claimDailyBonus = () => {
    if (!bonusAvailable || !userData) return;
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–∏–Ω–∞—Ö
      const coinsDataStr = localStorage.getItem(`streamcoins_${userData.id}`);
      if (coinsDataStr) {
        const parsedData = JSON.parse(coinsDataStr);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –≤ 100 –∫–æ–∏–Ω–æ–≤
        parsedData.balance = 100;
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–æ–∏–Ω–æ–≤
        parsedData.totalEarned = (parsedData.totalEarned || 0) + 100;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        const transaction = {
          id: `daily-${Date.now()}`,
          type: 'earn',
          amount: 100,
          reason: 'daily_bonus',
          timestamp: new Date().toISOString(),
          metadata: { note: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –∞–ª—å—Ñ–∞-—Ç–µ—Å—Ç–µ—Ä–∞' }
        };
        
        parsedData.transactions = [transaction, ...(parsedData.transactions || [])];
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–æ–Ω—É—Å–∞
        parsedData.lastDailyBonus = new Date().toISOString();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        localStorage.setItem(`streamcoins_${userData.id}`, JSON.stringify(parsedData));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        setCoinsData({
          balance: parsedData.balance,
          transactions: parsedData.transactions,
          lastDailyBonus: parsedData.lastDailyBonus
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–æ–Ω—É—Å–∞
        setBonusAvailable(false);
        setBonusMessage('–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ 100 —Å—Ç—Ä–∏–º–µ—Ä-–∫–æ–∏–Ω–æ–≤! –°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –∑–∞–≤—Ç—Ä–∞ –≤ 00:00 –ø–æ –ú–°–ö.');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞:', error);
      setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–æ–Ω—É—Å–∞');
    }
  };

  if (loading) {
    return (
      <div className={styles.loading}>
        <div className={styles.spinner}></div>
        <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className={styles.error}>
        <p>{error}</p>
        <button className={styles.button} onClick={() => router.push('/menu')}>
          –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é
        </button>
      </div>
    );
  }

  return (
    <div className={styles.coinsContainer}>
      <h1>–°—Ç—Ä–∏–º–µ—Ä-–∫–æ–∏–Ω—ã</h1>
      
      <div className={styles.balanceCard}>
        <div className={styles.balanceHeader}>
          <img 
            src="/images/stream-coin.svg" 
            alt="Stream Coins" 
            className={styles.coinIconLarge} 
          />
          <h2>–í–∞—à –±–∞–ª–∞–Ω—Å</h2>
        </div>
        <div className={styles.balanceAmount}>{coinsData.balance}</div>
      </div>
      
      <div className={styles.bonusCard}>
        <h2>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å</h2>
        <p>{bonusMessage}</p>
        {bonusAvailable && (
          <button 
            className={styles.claimButton}
            onClick={claimDailyBonus}
          >
            –ü–æ–ª—É—á–∏—Ç—å 100 –∫–æ–∏–Ω–æ–≤
          </button>
        )}
      </div>
      
      <div className={styles.transactionsCard}>
        <h2>–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</h2>
        {coinsData.transactions.length > 0 ? (
          <div className={styles.transactionsList}>
            {coinsData.transactions.map(transaction => (
              <div key={transaction.id} className={styles.transactionItem}>
                <div className={styles.transactionInfo}>
                  <span className={styles.transactionType}>
                    {transaction.type === 'earn' ? 'üìà –ü–æ–ª—É—á–µ–Ω–æ' : 'üìâ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ'}
                  </span>
                  <span className={styles.transactionReason}>
                    {transaction.reason === 'daily_bonus' ? '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å' : 
                     transaction.reason === 'initial' ? '–ù–∞—á–∞–ª—å–Ω—ã–µ –∫–æ–∏–Ω—ã' : 
                     transaction.reason}
                  </span>
                </div>
                <div className={styles.transactionAmount}>
                  {transaction.type === 'earn' ? '+' : '-'}{transaction.amount}
                </div>
              </div>
            ))}
          </div>
        ) : (
          <p className={styles.emptyState}>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</p>
        )}
      </div>
      
      <button className={styles.button} onClick={() => router.push('/menu')}>
        –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é
      </button>
    </div>
  );
} 