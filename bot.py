import logging
import os
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, ConversationHandler, CallbackQueryHandler
from flask import Flask, jsonify
import sqlite3

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
REGISTERING, SELECTING_ROLE, STREAMER_CONFIRMATION, VIEWING_STREAMER, RATING_MOVIE, WRITING_REVIEW = range(6)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect('streamer_app.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def create_tables():
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            role TEXT,
            twitch_username TEXT,
            followers INTEGER DEFAULT 0
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS movies (
            movie_id INTEGER PRIMARY KEY AUTOINCREMENT,
            streamer_id INTEGER,
            title TEXT,
            FOREIGN KEY(streamer_id) REFERENCES users(user_id)
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS ratings (
            rating_id INTEGER PRIMARY KEY AUTOINCREMENT,
            movie_id INTEGER,
            user_id INTEGER,
            score INTEGER,
            review TEXT,
            FOREIGN KEY(movie_id) REFERENCES movies(movie_id),
            FOREIGN KEY(user_id) REFERENCES users(user_id)
        )
    ''')
    conn.commit()

create_tables()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è OAuth —Ç–æ–∫–µ–Ω–∞ Twitch
def get_twitch_oauth_token(client_id, client_secret):
    url = "https://id.twitch.tv/oauth2/token"
    params = {
        "client_id": client_id,
        "client_secret": client_secret,
        "grant_type": "client_credentials"
    }
    response = requests.post(url, params=params)
    return response.json().get("access_token")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ Twitch
def check_twitch_followers(twitch_username, client_id, oauth_token):
    url = f"https://api.twitch.tv/helix/users?login={twitch_username}"
    headers = {
        "Client-ID": client_id,
        "Authorization": f"Bearer {oauth_token}"
    }
    response = requests.get(url, headers=headers)
    user_data = response.json().get("data", [])
    
    if not user_data:
        return None
    
    user_id = user_data[0]["id"]
    followers_url = f"https://api.twitch.tv/helix/channels/followers?broadcaster_id={user_id}"
    followers_response = requests.get(followers_url, headers=headers)
    total_followers = followers_response.json().get("total", 0)
    
    return total_followers

# –ö–æ–º–∞–Ω–¥–∞ /start
def start(update: Update, context: CallbackContext) -> int:
    keyboard = [
        [InlineKeyboardButton("–ó—Ä–∏—Ç–µ–ª—å", callback_data="viewer"),
         InlineKeyboardButton("–°—Ç—Ä–∏–º–µ—Ä", callback_data="streamer")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    update.message.reply_text(
        "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞–π—Ç–∏ —Å—Ç—Ä–∏–º–µ—Ä–æ–≤, –æ—Ü–µ–Ω–∏—Ç—å —Ñ–∏–ª—å–º—ã –∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Ä–µ—Ü–µ–Ω–∑–∏–∏.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å –Ω–∏–∂–µ:",
        parse_mode="HTML",
        reply_markup=reply_markup
    )
    return SELECTING_ROLE

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
def select_role(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    query.answer()

    role = query.data
    user_id = query.from_user.id
    username = query.from_user.username

    if role == "viewer":
        cursor.execute('INSERT OR IGNORE INTO users (user_id, username, role) VALUES (?, ?, ?)', (user_id, username, 'viewer'))
        conn.commit()
        query.edit_message_text(f"üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ –∑—Ä–∏—Ç–µ–ª—å!\n–í–∞—à –Ω–∏–∫–Ω–µ–π–º: <b>{username}</b>", parse_mode="HTML")
        return main_menu(update, context)
    elif role == "streamer":
        query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ Twitch:")
        return STREAMER_CONFIRMATION

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å—Ç—Ä–∏–º–µ—Ä–∞
def confirm_streamer(update: Update, context: CallbackContext) -> int:
    twitch_username = update.message.text
    user_id = update.message.from_user.id
    username = update.message.from_user.username

    client_id = os.getenv("TWITCH_CLIENT_ID")
    client_secret = os.getenv("TWITCH_CLIENT_SECRET")
    oauth_token = get_twitch_oauth_token(client_id, client_secret)

    followers = check_twitch_followers(twitch_username, client_id, oauth_token)

    if followers is None:
        update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ Twitch.")
        return SELECTING_ROLE

    if followers >= 250:
        cursor.execute('INSERT OR IGNORE INTO users (user_id, username, role, twitch_username, followers) VALUES (?, ?, ?, ?, ?)',
                       (user_id, username, 'streamer', twitch_username, followers))
        conn.commit()
        update.message.reply_text(
            f"üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ —Å—Ç—Ä–∏–º–µ—Ä!\n"
            f"–í–∞—à –Ω–∏–∫–Ω–µ–π–º: <b>{username}</b>\n"
            f"Twitch: <b>{twitch_username}</b>\n"
            f"–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: <b>{followers}</b>",
            parse_mode="HTML"
        )
        return main_menu(update, context)
    else:
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ Twitch (–º–∏–Ω–∏–º—É–º 250).")
        return SELECTING_ROLE

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu(update: Update, context: CallbackContext) -> int:
    keyboard = [
        [InlineKeyboardButton("–ù–∞–π—Ç–∏ —Å—Ç—Ä–∏–º–µ—Ä–∞", callback_data="find_streamer")],
        [InlineKeyboardButton("–û—Ü–µ–Ω–∏—Ç—å —Ñ–∏–ª—å–º", callback_data="rate_movie")],
        [InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å —Ä–µ—Ü–µ–Ω–∑–∏—é", callback_data="write_review")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    update.callback_query.edit_message_text(
        "<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
        parse_mode="HTML",
        reply_markup=reply_markup
    )
    return REGISTERING

# –ü–æ–∏—Å–∫ —Å—Ç—Ä–∏–º–µ—Ä–∞
def search_streamer(update: Update, context: CallbackContext) -> int:
    update.callback_query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å—Ç—Ä–∏–º–µ—Ä–∞:")
    return VIEWING_STREAMER

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è —Å—Ç—Ä–∏–º–µ—Ä–∞
def view_streamer(update: Update, context: CallbackContext) -> int:
    streamer_name = update.message.text
    cursor.execute('SELECT * FROM users WHERE username = ? AND role = ?', (streamer_name, 'streamer'))
    streamer = cursor.fetchone()

    if streamer:
        streamer_id, _, _, twitch_username, followers = streamer
        cursor.execute('SELECT * FROM movies WHERE streamer_id = ?', (streamer_id,))
        movies = cursor.fetchall()

        movies_list = "\n".join([f"{movie[2]}" for movie in movies])
        update.message.reply_text(
            f"–°—Ç—Ä–∏–º–µ—Ä: {streamer_name}\n"
            f"Twitch: {twitch_username}\n"
            f"–ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {followers}\n"
            f"–§–∏–ª—å–º—ã:\n{movies_list}"
        )
    else:
        update.message.reply_text("–°—Ç—Ä–∏–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    return main_menu(update, context)

# –û—Ü–µ–Ω–∫–∞ —Ñ–∏–ª—å–º–∞
def rate_movie(update: Update, context: CallbackContext) -> int:
    update.callback_query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞:")
    return RATING_MOVIE

def process_rating(update: Update, context: CallbackContext) -> int:
    movie_title = update.message.text
    context.user_data['movie_title'] = movie_title
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 10:")
    return RATING_MOVIE

def save_rating(update: Update, context: CallbackContext) -> int:
    score = int(update.message.text)
    movie_title = context.user_data['movie_title']
    user_id = update.message.from_user.id

    cursor.execute('SELECT movie_id FROM movies WHERE title = ?', (movie_title,))
    movie = cursor.fetchone()

    if movie:
        movie_id = movie[0]
        cursor.execute('INSERT INTO ratings (movie_id, user_id, score) VALUES (?, ?, ?)', (movie_id, user_id, score))
        conn.commit()
        update.message.reply_text(f"–í—ã –æ—Ü–µ–Ω–∏–ª–∏ —Ñ–∏–ª—å–º '{movie_title}' –Ω–∞ {score} –∏–∑ 10.")
    else:
        update.message.reply_text("–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    return main_menu(update, context)

# –ù–∞–ø–∏—Å–∞–Ω–∏–µ —Ä–µ—Ü–µ–Ω–∑–∏–∏
def write_review(update: Update, context: CallbackContext) -> int:
    update.callback_query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞:")
    return WRITING_REVIEW

def process_review(update: Update, context: CallbackContext) -> int:
    movie_title = update.message.text
    context.user_data['movie_title'] = movie_title
    update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Ä–µ—Ü–µ–Ω–∑–∏—é:")
    return WRITING_REVIEW

def save_review(update: Update, context: CallbackContext) -> int:
    review = update.message.text
    movie_title = context.user_data['movie_title']
    user_id = update.message.from_user.id

    cursor.execute('SELECT movie_id FROM movies WHERE title = ?', (movie_title,))
    movie = cursor.fetchone()

    if movie:
        movie_id = movie[0]
        cursor.execute('INSERT INTO ratings (movie_id, user_id, review) VALUES (?, ?, ?)', (movie_id, user_id, review))
        conn.commit()
        update.message.reply_text(f"–í–∞—à–∞ —Ä–µ—Ü–µ–Ω–∑–∏—è –Ω–∞ —Ñ–∏–ª—å–º '{movie_title}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
    else:
        update.message.reply_text("–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    return main_menu(update, context)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main() -> None:
    TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    if not TELEGRAM_BOT_TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return

    updater = Updater(TELEGRAM_BOT_TOKEN)
    dispatcher = updater.dispatcher

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            SELECTING_ROLE: [CallbackQueryHandler(select_role)],
            STREAMER_CONFIRMATION: [MessageHandler(Filters.text & ~Filters.command, confirm_streamer)],
            REGISTERING: [
                CallbackQueryHandler(search_streamer, pattern="^find_streamer$"),
                CallbackQueryHandler(rate_movie, pattern="^rate_movie$"),
                CallbackQueryHandler(write_review, pattern="^write_review$")
            ],
            VIEWING_STREAMER: [MessageHandler(Filters.text & ~Filters.command, view_streamer)],
            RATING_MOVIE: [
                MessageHandler(Filters.text & ~Filters.command, process_rating),
                MessageHandler(Filters.text & ~Filters.command, save_rating)
            ],
            WRITING_REVIEW: [
                MessageHandler(Filters.text & ~Filters.command, process_review),
                MessageHandler(Filters.text & ~Filters.command, save_review)
            ]
        },
        fallbacks=[CommandHandler('start', start)]
    )

    dispatcher.add_handler(conv_handler)

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
