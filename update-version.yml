name: Update Version and Devlog After Successful Deploy
on:
  push:
    branches:
      - main
jobs:
  check-commits-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Получаем всю историю коммитов
          token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Install dependencies
        run: npm install
      - name: Get commit count since last version change
        id: commit-count
        run: |
          # Получаем текущую версию из package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          MAJOR=$(echo $CURRENT_VERSION | cut -d'.' -f1)
          MINOR=$(echo $CURRENT_VERSION | cut -d'.' -f2)
          PATCH=$(echo $CURRENT_VERSION | cut -d'.' -f3)
          VERSION_PREFIX="PRE-ALFA"
          LAST_VERSION="$VERSION_PREFIX $MAJOR.$MINOR.$((PATCH - 1))"
          
          # Находим последний коммит, связанный с изменением версии
          LAST_VERSION_COMMIT=$(git log --grep="Автоматическое обновление версии до $CURRENT_VERSION" -n 1 --pretty=format:%H)
          
          if [ -z "$LAST_VERSION_COMMIT" ]; then
            COMMIT_COUNT=$(git rev-list --count main)
          else
            COMMIT_COUNT=$(git rev-list --count $LAST_VERSION_COMMIT..main)
          fi
          
          echo "commit_count=$COMMIT_COUNT" >> $GITHUB_OUTPUT
          echo "Commit count since last version change: $COMMIT_COUNT"
      - name: Check Cloudflare Deploy Status
        id: deploy-status
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          PROJECT_NAME="streamers-universe"
          LATEST_DEPLOYMENT=$(curl -s -X GET "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/pages/projects/$PROJECT_NAME/deployments" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            -H "Content-Type: application/json" | jq -r '.result[0].id')
          
          if [ -z "$LATEST_DEPLOYMENT" ]; then
            echo "deploy_status=failed" >> $GITHUB_OUTPUT
            echo "No deployments found or failed to fetch"
            exit 1
          fi
          
          DEPLOY_STATUS=$(curl -s -X GET "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/pages/projects/$PROJECT_NAME/deployments/$LATEST_DEPLOYMENT" \
            -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
            -H "Content-Type: application/json" | jq -r '.result.status')
          
          echo "deploy_status=$DEPLOY_STATUS" >> $GITHUB_OUTPUT
          echo "Latest deployment status: $DEPLOY_STATUS"
      - name: Increment Version and Update Devlog (if conditions met)
        if: steps.commit-count.outputs.commit_count >= 5 && steps.deploy-status.outputs.deploy_status == 'success'
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          MAJOR=$(echo $CURRENT_VERSION | cut -d'.' -f1)
          MINOR=$(echo $CURRENT_VERSION | cut -d'.' -f2)
          PATCH=$(echo $CURRENT_VERSION | cut -d'.' -f3)
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
          VERSION_PREFIX="PRE-ALFA"
          
          echo "New version: $VERSION_PREFIX $NEW_VERSION"
          sed -i "s/\"version\": \"$CURRENT_VERSION\"/\"version\": \"$VERSION_PREFIX $NEW_VERSION\"/g" package.json
          
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          DATE=$(date +'%Y-%m-%d')
          NEW_ENTRY="## Версия $VERSION_PREFIX $NEW_VERSION\n- Дата: $DATE\n- $COMMIT_MESSAGE\n"
          
          if [ -f DEVLOG.md ]; then
            echo -e "$NEW_ENTRY\n$(cat DEVLOG.md)" > DEVLOG.md
          else
            echo -e "# Журнал разработчика (Devlog) — Streamers Universe\n\n$NEW_ENTRY" > DEVLOG.md
          fi
      - name: Commit Changes
        if: steps.commit-count.outputs.commit_count >= 5 && steps.deploy-status.outputs.deploy_status == 'success'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add package.json DEVLOG.md
          git commit -m "Автоматическое обновление версии до $VERSION_PREFIX $NEW_VERSION и devlog"
          git push
